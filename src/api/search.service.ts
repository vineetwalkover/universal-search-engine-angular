/**
 * universal search engine
 * universal search engine api
 *
 * OpenAPI spec version: 2.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SearchParameters } from '../model/searchParameters';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SearchService {

    protected basePath = 'https://delve-api.intospace.io';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add Index By Api
     * Add Index by Api, provide name and type for creating new index
     * @param name name of index to be created
     * @param type type of index, should be Simple_Search or Ecommerce
     * @param API_KEY API_KEY for authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addIndex(name: string, type: string, API_KEY: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addIndex(name: string, type: string, API_KEY: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addIndex(name: string, type: string, API_KEY: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addIndex(name: string, type: string, API_KEY: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling addIndex.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling addIndex.');
        }

        if (API_KEY === null || API_KEY === undefined) {
            throw new Error('Required parameter API_KEY was null or undefined when calling addIndex.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (API_KEY !== undefined && API_KEY !== null) {
            queryParameters = queryParameters.set('API_KEY', <any>API_KEY);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/addIndexByApi`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }



  /**
   * Add Index By Api
   * Add Index by Api, provide name and type for creating new index
   * @param name name of index to be created
   * @param type type of index, should be Simple_Search or Ecommerce
   * @param API_KEY API_KEY for authentication
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllIndices(
    API_KEY: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public getAllIndices(
    API_KEY: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public getAllIndices(
    API_KEY: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public getAllIndices(
    API_KEY: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {

    if (API_KEY === null || API_KEY === undefined) {
      throw new Error(
        'Required parameter API_KEY was null or undefined when calling addIndex.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (API_KEY !== undefined && API_KEY !== null) {
      queryParameters = queryParameters.set('API_KEY', <any>API_KEY);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.post<any>(`${this.basePath}/getAllIndices`, null, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

    /**
     * This will add an object to the given index.
     * It rquire a json object which we want to add.
     * @param indexName name of index
     * @param API_KEY API_KEY for authentication
     * @param object This is the single object to be add in index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addObject(indexName: string, API_KEY: string, object: Object, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addObject(indexName: string, API_KEY: string, object: Object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addObject(indexName: string, API_KEY: string, object: Object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addObject(indexName: string, API_KEY: string, object: Object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling addObject.');
        }

        if (API_KEY === null || API_KEY === undefined) {
            throw new Error('Required parameter API_KEY was null or undefined when calling addObject.');
        }

        if (object === null || object === undefined) {
            throw new Error('Required parameter object was null or undefined when calling addObject.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (API_KEY !== undefined && API_KEY !== null) {
            queryParameters = queryParameters.set('API_KEY', <any>API_KEY);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/add/${encodeURIComponent(String(indexName))}`,
            object,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This will add an array of objects to the given index.
     * It rquire a json array of objects which we want to add.
     * @param indexName name of index
     * @param API_KEY API_KEY for authentication
     * @param objectsList This is the single object to be add in index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addObjects(indexName: string, API_KEY: string, objectsList: Array<any>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addObjects(indexName: string, API_KEY: string, objectsList: Array<any>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addObjects(indexName: string, API_KEY: string, objectsList: Array<any>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addObjects(indexName: string, API_KEY: string, objectsList: Array<any>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling addObjects.');
        }

        if (API_KEY === null || API_KEY === undefined) {
            throw new Error('Required parameter API_KEY was null or undefined when calling addObjects.');
        }

        if (objectsList === null || objectsList === undefined) {
            throw new Error('Required parameter objectsList was null or undefined when calling addObjects.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (API_KEY !== undefined && API_KEY !== null) {
            queryParameters = queryParameters.set('API_KEY', <any>API_KEY);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/bulkadd/${encodeURIComponent(String(indexName))}`,
            objectsList,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Copy Index configuration from one index to another
     * Copy Index Configuration, provide src and dest for copying index configuration
     * @param API_KEY API_KEY for authentication
     * @param src Source Index
     * @param dest Target Index
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public copyIndexConfig(API_KEY: string, src: string, dest: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public copyIndexConfig(API_KEY: string, src: string, dest: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public copyIndexConfig(API_KEY: string, src: string, dest: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public copyIndexConfig(API_KEY: string, src: string, dest: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (API_KEY === null || API_KEY === undefined) {
            throw new Error('Required parameter API_KEY was null or undefined when calling copyIndexConfig.');
        }

        if (src === null || src === undefined) {
            throw new Error('Required parameter src was null or undefined when calling copyIndexConfig.');
        }

        if (dest === null || dest === undefined) {
            throw new Error('Required parameter dest was null or undefined when calling copyIndexConfig.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (API_KEY !== undefined && API_KEY !== null) {
            queryParameters = queryParameters.set('API_KEY', <any>API_KEY);
        }
        if (src !== undefined && src !== null) {
            queryParameters = queryParameters.set('src', <any>src);
        }
        if (dest !== undefined && dest !== null) {
            queryParameters = queryParameters.set('dest', <any>dest);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/copyIndexConfig`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Index
     * Delete Index, provide name
     * @param index name of index to be deleted
     * @param API_KEY API_KEY for authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteIndex(index: string, API_KEY: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteIndex(index: string, API_KEY: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteIndex(index: string, API_KEY: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteIndex(index: string, API_KEY: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling deleteIndex.');
        }

        if (API_KEY === null || API_KEY === undefined) {
            throw new Error('Required parameter API_KEY was null or undefined when calling deleteIndex.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (index !== undefined && index !== null) {
            queryParameters = queryParameters.set('index', <any>index);
        }
        if (API_KEY !== undefined && API_KEY !== null) {
            queryParameters = queryParameters.set('API_KEY', <any>API_KEY);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/deleteIndexByApi`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This will delete the object with given object id
     * this require an objectID of object to be deleted
     * @param indexName name of index
     * @param API_KEY API_KEY for authentication
     * @param objectID objectId of the object to be deleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteObject(indexName: string, API_KEY: string, objectID: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteObject(indexName: string, API_KEY: string, objectID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteObject(indexName: string, API_KEY: string, objectID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteObject(indexName: string, API_KEY: string, objectID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling deleteObject.');
        }

        if (API_KEY === null || API_KEY === undefined) {
            throw new Error('Required parameter API_KEY was null or undefined when calling deleteObject.');
        }

        if (objectID === null || objectID === undefined) {
            throw new Error('Required parameter objectID was null or undefined when calling deleteObject.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (API_KEY !== undefined && API_KEY !== null) {
            queryParameters = queryParameters.set('API_KEY', <any>API_KEY);
        }
        if (objectID !== undefined && objectID !== null) {
            queryParameters = queryParameters.set('objectID', <any>objectID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/delete/${encodeURIComponent(String(indexName))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This will generate an event.
     * event type should be provided and it shoulb be click.
     * @param indexName name of index
     * @param API_KEY API_KEY for authentication
     * @param type type of the event
     * @param object This is the single object to be add in index.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateEvent(indexName: string, API_KEY: string, type: string, object: Object, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public generateEvent(indexName: string, API_KEY: string, type: string, object: Object, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public generateEvent(indexName: string, API_KEY: string, type: string, object: Object, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public generateEvent(indexName: string, API_KEY: string, type: string, object: Object, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling generateEvent.');
        }

        if (API_KEY === null || API_KEY === undefined) {
            throw new Error('Required parameter API_KEY was null or undefined when calling generateEvent.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling generateEvent.');
        }

        if (object === null || object === undefined) {
            throw new Error('Required parameter object was null or undefined when calling generateEvent.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (API_KEY !== undefined && API_KEY !== null) {
            queryParameters = queryParameters.set('API_KEY', <any>API_KEY);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/event/${encodeURIComponent(String(indexName))}`,
            object,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All objects stored in index
     * Get All objects stored in index, limit is 1000
     * @param index
     * @param API_KEY API_KEY for authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllObjects(index: string, API_KEY: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllObjects(index: string, API_KEY: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllObjects(index: string, API_KEY: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllObjects(index: string, API_KEY: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling getAllObjects.');
        }

        if (API_KEY === null || API_KEY === undefined) {
            throw new Error('Required parameter API_KEY was null or undefined when calling getAllObjects.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (index !== undefined && index !== null) {
            queryParameters = queryParameters.set('index', <any>index);
        }
        if (API_KEY !== undefined && API_KEY !== null) {
            queryParameters = queryParameters.set('API_KEY', <any>API_KEY);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/getAllObjects`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Returns a list of stuff
     * @param indexName name of index
     * @param query Query to be searched
     * @param API_KEY API KEY for authentication
     * @param size maximum number of results to be returned
     * @param userToken userToken for personalization
     * @param searchParameters The user to create.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchQuery(indexName: string, query: string, API_KEY: string, size?: number, userToken?: string, searchParameters?: SearchParameters, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchQuery(indexName: string, query: string, API_KEY: string, size?: number, userToken?: string, searchParameters?: SearchParameters, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchQuery(indexName: string, query: string, API_KEY: string, size?: number, userToken?: string, searchParameters?: SearchParameters, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchQuery(indexName: string, query: string, API_KEY: string, size?: number, userToken?: string, searchParameters?: SearchParameters, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (indexName === null || indexName === undefined) {
            throw new Error('Required parameter indexName was null or undefined when calling searchQuery.');
        }

        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling searchQuery.');
        }

        if (API_KEY === null || API_KEY === undefined) {
            throw new Error('Required parameter API_KEY was null or undefined when calling searchQuery.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (API_KEY !== undefined && API_KEY !== null) {
            queryParameters = queryParameters.set('API_KEY', <any>API_KEY);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (userToken !== undefined && userToken !== null) {
            queryParameters = queryParameters.set('userToken', <any>userToken);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/search/${encodeURIComponent(String(indexName))}`,
            searchParameters,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
